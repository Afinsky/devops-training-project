pipeline{
    agent{
        label "slave1"
    }


    environment{
      registry = "10.20.40.176:8084"


      Version_Major = '0'
      Version_Minor  = '0'
      Version_Patch  = '0'
    }


    parameters {
      //string(defaultValue: "${Version_Major}.${Version_Minor}.${Version_Patch}", description: 'Specify build version', name: 'VERSION', trim: false)

      string(defaultValue: '0.0.0', description: 'Specify build version', name: 'VERSION', trim: false)
      booleanParam(defaultValue: false, description: 'Set build version to 0', name: 'RESET_BUILD_VERSION')
    }



    stages{ 

        stage('Update build version'){
            steps {
                script {
                    def version
                    if ( env.RESET_BUILD_VERSION == true ) {
                        version = VersionNumber(projectStartDate: '2000-01-01', 
                        overrideBuildsAllTime: '0', 
                        versionNumberString: '${VERSION}.${BUILDS_ALL_TIME}', 
                        worstResultForIncrement: 'SUCCESS')
                    } else {
                        version = VersionNumber(projectStartDate: '2000-01-01', 
                        versionNumberString: '${VERSION}.${BUILDS_ALL_TIME}', 
                        worstResultForIncrement: 'SUCCESS')
                    }
                    env.VERSION = version
                    buildName(version)
                }
            }
        }


        stage("Docker build images"){
            parallel{
                
                stage("Docker build Front image"){
                        steps{
                                sh '''
                                docker build -t $registry/frontapp:${VERSION} -f docker/Dockerfile-front .
                                '''
                        }  
                }
                
                stage("Docker build Back image"){
                        steps{
                                sh '''
                                docker build -t $registry/backapp:${VERSION} -f docker/Dockerfile-back .
                                '''  
                        }  
                }
            
            }
        }



        stage("Docker push images to Nexus registry"){
            parallel{
                
                stage("Docker push Front image"){
                        steps{
                            withDockerRegistry(credentialsId: 'nexus_registry', url: "http://${registry}/repository/javaapp"){
                                sh '''
                                docker push $registry/frontapp:${VERSION}
                                '''
                            }
                        }  
                }
                
                stage("Docker push Back image"){
                        steps{
                            withDockerRegistry(credentialsId: 'nexus_registry', url: "http://${registry}/repository/javaapp"){
                                sh '''
                                docker push $registry/backapp:${VERSION}
                                '''  
                            }
                        }  
                }
            
            }
        }


        stage("Deploy images from Nexus registry to front targets"){
            steps{
                    
                    withCredentials([string(credentialsId: 'NEXUS_USER_ID', variable: 'NEXUS_USER'), 
                        string(credentialsId: 'NEXUS_PASS_ID', variable: 'NEXUS_PASS'), 
                        string(credentialsId: 'NEXUS_URL_ID', variable: 'NEXUS_URL')]) {
                        sh 'ansible-playbook -i ci/ansible/ec2.py ci/ansible/front_deploy.yaml --extra-vars "user=${NEXUS_USER} pass=${NEXUS_PASS} url=${NEXUS_URL} IMAGE_VERSION=${VERSION}"'        
                    }
            }  
        }


        stage("Deploy images from Nexus registry to back targets"){
            steps{

                    withCredentials([string(credentialsId: 'NEXUS_USER_ID', variable: 'NEXUS_USER'),
                        string(credentialsId: 'NEXUS_PASS_ID', variable: 'NEXUS_PASS'),
                        string(credentialsId: 'NEXUS_URL_ID', variable: 'NEXUS_URL'),
                        string(credentialsId: 'DB_USERNAME', variable: 'DB_USERNAME'),
                        string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'),
                        string(credentialsId: 'DB_URL', variable: 'DB_URL'),
                        string(credentialsId: 'DB_PORT', variable: 'DB_PORT'),
                        string(credentialsId: 'DB_NAME', variable: 'DB_NAME')]){
                        sh 'ansible-playbook -i ci/ansible/ec2.py ci/ansible/back_deploy.yaml --extra-vars \
                            "user=${NEXUS_USER} \
                            pass=${NEXUS_PASS} \
                            url=${NEXUS_URL} \
                            db_username=${DB_USERNAME} \
                            db_password=${DB_PASSWORD} \
                            db_url=${DB_URL} \
                            db_port=${DB_PORT} \
                            db_name=${DB_NAME} \
                            IMAGE_VERSION=${VERSION}"'.stripIndent()
                    }
            }
        }



    }
    
        post{
            always{
                echo "========always========"
                
                  sh '''
                  docker rmi $registry/frontapp:${VERSION}
                  docker rmi $registry/backapp:${VERSION}
                  echo y | docker image prune
                  '''
            }
            success{
                echo "========pipeline executed successfully ========"
            }
            failure{
                echo "========pipeline execution failed========"
            }
        }
}
