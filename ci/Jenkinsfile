pipeline{
    agent{
        label "slave1"
    }


    environment{
      registry = "10.20.40.176:8084"


      Version_Major = '0'
      Version_Minor  = '0'
      Version_Patch  = '0'
    }


    parameters {
      //string(defaultValue: "${Version_Major}.${Version_Minor}.${Version_Patch}", description: 'Specify build version', name: 'VERSION', trim: false)

      string(defaultValue: '0.0.0', description: 'Specify build version', name: 'VERSION', trim: false)
    }



    stages{ 


        stage('Update build version'){
          when { anyOf { branch 'dev'; branch 'test'; branch 'release' } }
          steps {
            script {
              def previosVersion
              def newVersion = "${params.VERSION}.0"
              // Find last not failed or aborted build
              def previosBuild = currentBuild.getPreviousBuild()
              while ( previosBuild && ['FAILURE', 'ABORTED'].contains(previosBuild.getCurrentResult()) ) {
                previosBuild = previosBuild.getPreviousBuild()
              }

              if ( previosBuild ) {
                previosVersion = previosBuild.displayName
                def (pMajor, pMinor, pPatch, pBuild) = previosVersion.tokenize('.').collect { it.isNumber() ? it.toInteger() : null }
                if ( "${params.VERSION}" == "${pMajor}.${pMinor}.${pPatch}") {
                  newVersion = "${pMajor}.${pMinor}.${pPatch}.${pBuild + 1}"
                }
              }
              println("New version = ${newVersion} ; Previos version = ${previosVersion}")
              buildName(newVersion)
            }
          }
        }



        stage("Docker build images"){
            parallel{
                
                stage("Docker build Front image"){
                        steps{
                                sh '''
                                docker build -t $registry/frontapp:${currentBuild.displayName} -f docker/Dockerfile-front .
                                '''
                        }  
                }
                
                stage("Docker build Back image"){
                        steps{
                                sh '''
                                docker build -t $registry/backapp:${currentBuild.displayName} -f docker/Dockerfile-back .
                                '''  
                        }  
                }
            
            }
        }



        stage("Docker push images to Nexus registry"){
            parallel{
                
                stage("Docker push Front image"){
                        steps{
                            withDockerRegistry(credentialsId: 'nexus_registry', url: 'http://10.20.40.176:8084/repository/javaapp'){
                                sh '''
                                docker push $registry/frontapp:${currentBuild.displayName}
                                '''
                            }
                        }  
                }
                
                stage("Docker push Back image"){
                        steps{
                            withDockerRegistry(credentialsId: 'nexus_registry', url: 'http://10.20.40.176:8084/repository/javaapp'){
                                sh '''
                                docker push $registry/backapp:${currentBuild.displayName}
                                '''  
                            }
                        }  
                }
            
            }
        }


        stage("Deploy images from Nexus registry to front targets"){
            steps{
                    
                    withCredentials([string(credentialsId: 'NEXUS_USER_ID', variable: 'NEXUS_USER'), 
                        string(credentialsId: 'NEXUS_PASS_ID', variable: 'NEXUS_PASS'), 
                        string(credentialsId: 'NEXUS_URL_ID', variable: 'NEXUS_URL')]) {
                        sh 'ansible-playbook -i ci/ansible/ec2.py ci/ansible/front_deploy.yaml --extra-vars "user=${NEXUS_USER} pass=${NEXUS_PASS} url=${NEXUS_URL} IMAGE_VERSION=${currentBuild.displayName}"'        
                    }
            }  
        }


        stage("Deploy images from Nexus registry to back targets"){
            steps{

                    withCredentials([string(credentialsId: 'NEXUS_USER_ID', variable: 'NEXUS_USER'),
                        string(credentialsId: 'NEXUS_PASS_ID', variable: 'NEXUS_PASS'),
                        string(credentialsId: 'NEXUS_URL_ID', variable: 'NEXUS_URL'),
                        string(credentialsId: 'DB_USERNAME', variable: 'DB_USERNAME'),
                        string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'),
                        string(credentialsId: 'DB_URL', variable: 'DB_URL'),
                        string(credentialsId: 'DB_PORT', variable: 'DB_PORT'),
                        string(credentialsId: 'DB_NAME', variable: 'DB_NAME')]){
                        sh 'ansible-playbook -i ci/ansible/ec2.py ci/ansible/back_deploy.yaml --extra-vars \
                            "user=${NEXUS_USER} \
                            pass=${NEXUS_PASS} \
                            url=${NEXUS_URL} \
                            db_username=${DB_USERNAME} \
                            db_password=${DB_PASSWORD} \
                            db_url=${DB_URL} \
                            db_port=${DB_PORT} \
                            db_name=${DB_NAME} \
                            IMAGE_VERSION=${currentBuild.displayName}"'.stripIndent()
                    }
            }
        }



    }
    
        post{
            always{
                echo "========always========"
                
                  sh '''
                  echo y | docker image prune
                  '''
            }
            success{
                echo "========pipeline executed successfully ========"
            }
            failure{
                echo "========pipeline execution failed========"
            }
        }
}
